[export]
enabled = false
path = ".bacon-locations"
line_format = "{kind} {path}:{line}:{column} {message}"

default_job = "run"

[jobs.check]
command = ["cargo", "check", "--color", "always"]
need_stdout = false

[jobs.check-all]
command = ["cargo", "check", "--all-targets", "--color", "always"]
need_stdout = false

[jobs.clippy]
command = [
  "cargo", 
  "clippy", 
  "--all-targets", 
  "--color", 
  "always",
  "--",
	"-D", "clippy::all",
	"-D", "clippy::pedantic",
	"-D", "clippy::nursery",
	"-D", "clippy::cargo",
	"-D", "clippy::style",
	"-A", "clippy::arithmetic_side_effects",
	"-A", "clippy::integer_division",
	"-A", "clippy::float_arithmetic",
	"-A", "clippy::cast_precision_loss",
	"-A", "clippy::missing-docs-in-private-items",
	"-A", "clippy::implicit_return",
	"-A", "clippy::separated_literal_suffix",
	"-A", "clippy::std_instead_of_core",
	"-A", "clippy::mod_module_files",
	"-A", "clippy::option_if_let_else",
	"-A", "clippy::missing_trait_methods",
	"-A", "clippy::allow_attributes_without_reason",
]
need_stdout = false

# This job lets you run
# - all tests: bacon test
# - a specific test: bacon test -- config::test_default_files
# - the tests of a package: bacon test -- -- -p config
[jobs.test]
command = [
  "cargo",
  "test",
  "--color",
  "always",
  "--",
  "--color",
  "always",  # see https://github.com/Canop/bacon/issues/124
]
need_stdout = true

[jobs.doc]
command = ["cargo", "doc", "--color", "always", "--no-deps"]
need_stdout = false

# If the doc compiles, then it opens in your browser and bacon switches
# to the previous job
[jobs.doc-open]
command = ["cargo", "doc", "--color", "always", "--no-deps", "--open"]
need_stdout = false
on_success = "back"                                                    # so that we don't open the browser at each change

# You can run your application and have the result displayed in bacon,
# *if* it makes sense for this crate.
# Don't forget the `--color always` part or the errors won't be
# properly parsed.
# If your program never stops (eg a server), you may set `background`
# to false to have the cargo run output immediately displayed instead
# of waiting for program's end.
[jobs.run]
command = [
  "cargo",
  "run",
  "--color",
  "always",
  # put launch parameters for your program behind a `--` separator
]
need_stdout = true
allow_warnings = true
background = false

# This parameterized job runs the example of your choice, as soon
# as the code compiles.
# Call it as
#    bacon ex -- my-example
[jobs.ex]
command = ["cargo", "run", "--color", "always", "--example"]
need_stdout = true
allow_warnings = true

# Uncomment and change the key-bindings you want to define
# (some of those ones are the defaults and are just here
#  for illustration)
[keybindings]
# esc = "back"
# g = "scroll-to-top"
# shift-g = "scroll-to-bottom"
# k = "scroll-lines(-1)"
# j = "scroll-lines(1)"
# ctrl-c = "quit"
# ctrl-q = "quit"
# q = "quit"
# F5 = "rerun"
# s = "toggle-summary"
# w = "toggle-wrap"
# b = "toggle-backtrace"
# Home = "scroll-to-top"
# End = "scroll-to-bottom"
# Up = "scroll-lines(-1)"
# Down = "scroll-lines(1)"
# PageUp = "scroll-pages(-1)"
# PageDown = "scroll-pages(1)"
# Space = "scroll-pages(1)"
# a = "job:check-all"
# i = "job:initial"
# c = "job:clippy"
# d = "job:doc-open"
# t = "job:test"
# r = "job:run"
# alt-m = "job:my-job"
